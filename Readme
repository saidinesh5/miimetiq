Project components:

MiimetiqService(options) //Abstraction over RabbitMQ Connection
  HOST ~ "api.miimetiq.local"
  INSTANCE_NAME ~ "test_dg"
  MODEL ~ "6-diesel_generator_schema"
  USERNAME ~ `${MODEL}/${INSTANCE_NAME}`
  PASSWORD ~ "anypass"
  - connect([callback])
  - getFeed(SignalParams, callback) //A simple fanout publisher
  - disconnect()

MiimetiqFeed(channel, params, exchange, bindingKey): //Abstraction over RabbitMQ channel+exchange+queue
  DEVICE_ID ~ "56090580e7e466125aa1c0a5"
  INSTRUMENT ~ "generator"
  WRITER ~ "power"
  TYPE ~ "boolean"
  BINDING_KEY ~ `miimetiq.ds.writer.${TYPE}.${MODEL}.${DEVICE_ID}.${INSTRUMENT}.${WRITER}`
  - publish(data, [callback])
  - subscribe(callback)
  - terminate

MiimetiqRPCServer(MiimetiqConnection, params) //How to ensure a singleton?
  DEVICE_ID
  INSTRUMENT
  - start(procedures to expose) //start listening for incoming requests
  - stop() //stop listening for incomiing requests

MiimetiqRPCClient(MiimetiqConnection)
  DEVICE_ID
  INSTRUMENT
  - connect(callback) // returns a list of functions that do RPC on the server
  - isReady() // true when connection is established and the client knows about the remote procedures 
  - disconnect() // disconnect from the server

MiimetiqSeriaizer
  - supportsDataType(dataType)
  - pack(data, dataType)
  - unpack(data, dataType)
